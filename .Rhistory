usethis::use_data_raw()
library(devtools)
library(usethis)
library(desc)
# Remove default DESC
unlink("DESCRIPTION")
# Create and clean desc
my_desc <- description$new("!new")
# Set your package name
my_desc$set("Package", "yourpackage")
#Set your name
my_desc$set("Authors@R", "person('Colin', 'Fay', email = 'contact@colinfay.me', role = c('cre', 'aut'))")
# Remove some author fields
my_desc$del("Maintainer")
# Set the version
my_desc$set_version("0.0.0.9000")
# The title of your package
my_desc$set(Title = "My Supper API Wrapper")
# The description of your package
my_desc$set(Description = "A long description of this super package I'm working on.")
# The urls
my_desc$set("URL", "http://this")
my_desc$set("BugReports", "http://that")
# Save everyting
my_desc$write(file = "DESCRIPTION")
# If you want to use the MIT licence, code of conduct, and lifecycle badge
use_mit_license(name = "Colin FAY")
use_code_of_conduct()
use_lifecycle_badge("Experimental")
use_news_md()
# Get the dependencies
use_package("httr")
use_package("jsonlite")
use_package("curl")
use_package("attempt")
use_package("purrr")
# Clean your description
use_tidy_description()
install.packages("rmarkdown")
install.packages("tidyverse")
install.packages("httr")
install.packages("roxygen2")
player_info <- httr::GET("https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/866268?view=kona_player_info",
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
))) %>%
httr::content(as = 'text', type = 'JSON', encoding = 'UTF-8') %>%
jsonlite::fromJSON(simplifyDataFrame = T) %>%
purrr::pluck("players") %>%
dplyr::bind_rows()
install.packages("tidyverse")
library(tidyverse)
Sys.Date()
substr(Sys.Date(),1,4)
as.numeric(substr(Sys.Date(),1,4))
player_info <- httr::GET("https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/866268?view=kona_player_info",
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
))) %>%
httr::content(as = 'text', type = 'JSON', encoding = 'UTF-8') %>%
jsonlite::fromJSON(simplifyDataFrame = T) %>%
purrr::pluck("players") %>%
dplyr::bind_rows()
View(player_info)
players <- player_info %>%
tidyr::unnest_wider(col = data) %>%
select(onTeamId, player) %>%
tidyr::unnest_wider(col = player) %>%
select(onTeamId, active, defaultPositionId, firstName, lastName, fullName, stats) %>%
rename(stats_group = stats) %>%
tidyr::unnest_longer(col = stats_group) %>%
tidyr::unnest_wider(col = stats_group) %>%
tidyr::hoist(.col = stats,
pass_comp = '1',
pass_att = '0',
pass_yds = '3',
pass_td = '4',
pass_2pt = '19',
pass_int = '20',
rush_att = '23',
rush_yds = '24',
rush_td = '25',
rush_2pt = '26',
rec = '53',
rec_tgt = '58',
rec_yds = '42',
rec_td = '43',
rec_2pt = '44',
fumbles = '72',
fg_0_39 = '80',
fg_miss_0_39 = '82',
fg_40_49 = '77',
fg_miss_40_49 = '79',
fg_50 = '74',
fg_miss_50 = '76',
xpt = '86',
xpt_miss = '88',
sacks = '99',
fum_forced = '106',
fum_recovered = '96',
def_int = '95',
safeties = '98',
blocks = '97',
block_td = '93',
kick_ret_td = '101',
punt_ret_td = '102',
fum_ret_td = '103',
int_ret_td = '104',
pts_allow_0 = '89',
pts_allow_1_6 = '90',
pts_allow_7_13 = '91',
pts_allow_14_17 = '92',
pts_allow_17_20 = '121',
pts_allow_21_27 = '122',
pts_allow_28_34 = '123',
pts_allow_35_45 = '124',
pts_allow_45_plus = '125') %>%
mutate(statSourceId = if_else(statSourceId == 0, "Actual","Projected")) %>%
mutate(defaultPositionId = case_when(
defaultPositionId == 16 ~ "D/ST",
defaultPositionId == 1 ~ "QB",
defaultPositionId == 3 ~ "WR",
defaultPositionId == 2 ~ "RB",
defaultPositionId == 4 ~ "TE",
defaultPositionId == 5 ~ "K",
T ~ "Other"))
View(player_info)
View(player_info[[47]][[1]])
player_info <- httr::GET("https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/866268?view=kona_player_info",
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
))) %>%
httr::content()
tibble::tibble(data = player_info %>% purrr::flatten() %>% purrr::pluck("players")) %>%
tidyr::unnest_wider(col = data) %>%
select(onTeamId, player) %>%
tidyr::unnest_wider(col = player) %>%
select(onTeamId, active, defaultPositionId, firstName, lastName, fullName, stats) %>%
rename(stats_group = stats) %>%
tidyr::unnest_longer(col = stats_group) %>%
tidyr::unnest_wider(col = stats_group) %>%
tidyr::hoist(.col = stats,
pass_comp = '1',
pass_att = '0',
pass_yds = '3',
pass_td = '4',
pass_2pt = '19',
pass_int = '20',
rush_att = '23',
rush_yds = '24',
rush_td = '25',
rush_2pt = '26',
rec = '53',
rec_tgt = '58',
rec_yds = '42',
rec_td = '43',
rec_2pt = '44',
fumbles = '72',
fg_0_39 = '80',
fg_miss_0_39 = '82',
fg_40_49 = '77',
fg_miss_40_49 = '79',
fg_50 = '74',
fg_miss_50 = '76',
xpt = '86',
xpt_miss = '88',
sacks = '99',
fum_forced = '106',
fum_recovered = '96',
def_int = '95',
safeties = '98',
blocks = '97',
block_td = '93',
kick_ret_td = '101',
punt_ret_td = '102',
fum_ret_td = '103',
int_ret_td = '104',
pts_allow_0 = '89',
pts_allow_1_6 = '90',
pts_allow_7_13 = '91',
pts_allow_14_17 = '92',
pts_allow_17_20 = '121',
pts_allow_21_27 = '122',
pts_allow_28_34 = '123',
pts_allow_35_45 = '124',
pts_allow_45_plus = '125') %>%
mutate(statSourceId = if_else(statSourceId == 0, "Actual","Projected")) %>%
mutate(defaultPositionId = case_when(
defaultPositionId == 16 ~ "D/ST",
defaultPositionId == 1 ~ "QB",
defaultPositionId == 3 ~ "WR",
defaultPositionId == 2 ~ "RB",
defaultPositionId == 4 ~ "TE",
defaultPositionId == 5 ~ "K",
T ~ "Other"))
View(player_info)
tibble::tibble(data = player_info %>% purrr::flatten() %>% purrr::pluck("players")) %>%
tidyr::unnest_wider(col = data)
View(player_info)
url <- "https://fantasy.espn.com/apis/v3/games/ffl/leagueHistory/866268?seasonId=2019"
player_info <- httr::GET(url, query = list("view" = "kona_player_info","offset"="100")) %>%
content()
players <- tibble::tibble(data = player_info %>% purrr::flatten() %>% purrr::pluck("players")) %>%
tidyr::unnest_wider(col = data) %>%
select(onTeamId, player) %>%
tidyr::unnest_wider(col = player) %>%
select(onTeamId, active, defaultPositionId, firstName, lastName, fullName, stats) %>%
rename(stats_group = stats) %>%
tidyr::unnest_longer(col = stats_group) %>%
tidyr::unnest_wider(col = stats_group) %>%
tidyr::hoist(.col = stats,
pass_comp = '1',
pass_att = '0',
pass_yds = '3',
pass_td = '4',
pass_2pt = '19',
pass_int = '20',
rush_att = '23',
rush_yds = '24',
rush_td = '25',
rush_2pt = '26',
rec = '53',
rec_tgt = '58',
rec_yds = '42',
rec_td = '43',
rec_2pt = '44',
fumbles = '72',
fg_0_39 = '80',
fg_miss_0_39 = '82',
fg_40_49 = '77',
fg_miss_40_49 = '79',
fg_50 = '74',
fg_miss_50 = '76',
xpt = '86',
xpt_miss = '88',
sacks = '99',
fum_forced = '106',
fum_recovered = '96',
def_int = '95',
safeties = '98',
blocks = '97',
block_td = '93',
kick_ret_td = '101',
punt_ret_td = '102',
fum_ret_td = '103',
int_ret_td = '104',
pts_allow_0 = '89',
pts_allow_1_6 = '90',
pts_allow_7_13 = '91',
pts_allow_14_17 = '92',
pts_allow_17_20 = '121',
pts_allow_21_27 = '122',
pts_allow_28_34 = '123',
pts_allow_35_45 = '124',
pts_allow_45_plus = '125') %>%
mutate(statSourceId = if_else(statSourceId == 0, "Actual","Projected")) %>%
mutate(defaultPositionId = case_when(
defaultPositionId == 16 ~ "D/ST",
defaultPositionId == 1 ~ "QB",
defaultPositionId == 3 ~ "WR",
defaultPositionId == 2 ~ "RB",
defaultPositionId == 4 ~ "TE",
defaultPositionId == 5 ~ "K",
T ~ "Other"))
View(player_info)
player_info <- httr::GET(url, query = list("view" = "kona_player_info")) %>%
httr::content(as = 'text', type = 'JSON', encoding = 'UTF-8') %>%
jsonlite::fromJSON(simplifyDataFrame = T) %>%
purrr::pluck("players") %>%
dplyr::bind_rows()
View(player_info)
player_info <- httr::GET(url,
query = list("view" = "kona_player_info"),
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
)))%>%
httr::content(as = 'text', type = 'JSON', encoding = 'UTF-8') %>%
jsonlite::fromJSON(simplifyDataFrame = T) %>%
purrr::pluck("players") %>%
dplyr::bind_rows()
players <- tibble::tibble(data = player_info %>% purrr::flatten() %>% purrr::pluck("players")) %>%
tidyr::unnest_wider(col = data) %>%
select(onTeamId, player) %>%
tidyr::unnest_wider(col = player) %>%
select(onTeamId, active, defaultPositionId, firstName, lastName, fullName, stats) %>%
rename(stats_group = stats) %>%
tidyr::unnest_longer(col = stats_group) %>%
tidyr::unnest_wider(col = stats_group) %>%
tidyr::hoist(.col = stats,
pass_comp = '1',
pass_att = '0',
pass_yds = '3',
pass_td = '4',
pass_2pt = '19',
pass_int = '20',
rush_att = '23',
rush_yds = '24',
rush_td = '25',
rush_2pt = '26',
rec = '53',
rec_tgt = '58',
rec_yds = '42',
rec_td = '43',
rec_2pt = '44',
fumbles = '72',
fg_0_39 = '80',
fg_miss_0_39 = '82',
fg_40_49 = '77',
fg_miss_40_49 = '79',
fg_50 = '74',
fg_miss_50 = '76',
xpt = '86',
xpt_miss = '88',
sacks = '99',
fum_forced = '106',
fum_recovered = '96',
def_int = '95',
safeties = '98',
blocks = '97',
block_td = '93',
kick_ret_td = '101',
punt_ret_td = '102',
fum_ret_td = '103',
int_ret_td = '104',
pts_allow_0 = '89',
pts_allow_1_6 = '90',
pts_allow_7_13 = '91',
pts_allow_14_17 = '92',
pts_allow_17_20 = '121',
pts_allow_21_27 = '122',
pts_allow_28_34 = '123',
pts_allow_35_45 = '124',
pts_allow_45_plus = '125') %>%
mutate(statSourceId = if_else(statSourceId == 0, "Actual","Projected")) %>%
mutate(defaultPositionId = case_when(
defaultPositionId == 16 ~ "D/ST",
defaultPositionId == 1 ~ "QB",
defaultPositionId == 3 ~ "WR",
defaultPositionId == 2 ~ "RB",
defaultPositionId == 4 ~ "TE",
defaultPositionId == 5 ~ "K",
T ~ "Other"))
player_info <- httr::GET("https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/866268?view=kona_player_info",
httr::query = list("view" = "kona_player_info"),
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
))) %>%
httr::content()
player_info <- httr::GET("https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/866268",
httr::query = list("view" = "kona_player_info"),
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
))) %>%
httr::content()
get_player_stats <- function(week, year, league_id){
if (as.numeric(substr(Sys.Date(),1,4)) == year) {
url <- paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/",league_id,"?view=kona_player_info")
player_stats <- httr::GET(url,
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
))) %>%
httr::content(as = 'text', type = 'JSON', encoding = 'UTF-8') %>%
jsonlite::fromJSON(simplifyDataFrame = T) %>%
purrr::pluck("players") %>%
dplyr::bind_rows()
} else {
url <- paste0("https://fantasy.espn.com/apis/v3/games/ffl/leagueHistory/",league_id,"?seasonId=",season)
player_info <- httr::GET(url,
query = list("view" = "kona_player_info"),
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
)))%>%
httr::content(as = 'text', type = 'JSON', encoding = 'UTF-8') %>%
jsonlite::fromJSON(simplifyDataFrame = T) %>%
purrr::pluck("players") %>%
dplyr::bind_rows()
}
return(player_stats)
}
test <- get_player_stats(year = 2020, league_id = 866268)
test <- get_player_stats(year = 2019, league_id = 866268)
test <- get_player_stats(season = 2019, league_id = 866268)
get_player_stats <- function(week, season, league_id){
if (as.numeric(substr(Sys.Date(),1,4)) == season) {
url <- paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/",league_id,"?view=kona_player_info")
player_stats <- httr::GET(url,
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
))) %>%
httr::content(as = 'text', type = 'JSON', encoding = 'UTF-8') %>%
jsonlite::fromJSON(simplifyDataFrame = T) %>%
purrr::pluck("players") %>%
dplyr::bind_rows()
} else {
url <- paste0("https://fantasy.espn.com/apis/v3/games/ffl/leagueHistory/",league_id,"?seasonId=",season)
player_info <- httr::GET(url,
query = list("view" = "kona_player_info"),
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
)))%>%
httr::content(as = 'text', type = 'JSON', encoding = 'UTF-8') %>%
jsonlite::fromJSON(simplifyDataFrame = T) %>%
purrr::pluck("players") %>%
dplyr::bind_rows()
}
return(player_stats)
}
test <- get_player_stats(season = 2019, league_id = 866268)
get_player_stats <- function(week, season, league_id){
if (as.numeric(substr(Sys.Date(),1,4)) == season) {
url <- paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/",league_id,"?view=kona_player_info")
player_stats <- httr::GET(url,
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
))) %>%
httr::content(as = 'text', type = 'JSON', encoding = 'UTF-8') %>%
jsonlite::fromJSON(simplifyDataFrame = T) %>%
purrr::pluck("players") %>%
dplyr::bind_rows()
} else {
url <- paste0("https://fantasy.espn.com/apis/v3/games/ffl/leagueHistory/",league_id,"?seasonId=",season)
player_stats <- httr::GET(url,
query = list("view" = "kona_player_info"),
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
)))%>%
httr::content(as = 'text', type = 'JSON', encoding = 'UTF-8') %>%
jsonlite::fromJSON(simplifyDataFrame = T) %>%
purrr::pluck("players") %>%
dplyr::bind_rows()
}
return(player_stats)
}
test <- get_player_stats(season = 2019, league_id = 866268)
test <- get_player_stats(season = 2020, league_id = 866268)
get_player_stats <- function(week, season, league_id){
if (as.numeric(substr(Sys.Date(),1,4)) == season) {
url <- paste0("https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/",league_id,"?view=kona_player_info")
player_stats <- httr::GET(url,
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
))) %>%
httr::content(as = 'text', type = 'JSON', encoding = 'UTF-8') %>%
jsonlite::fromJSON(simplifyDataFrame = T) %>%
purrr::pluck("players") %>%
dplyr::bind_rows()
} else {
url <- paste0("https://fantasy.espn.com/apis/v3/games/ffl/leagueHistory/",league_id,"?seasonId=",season)
player_stats <- httr::GET(url,
query = list("view" = "kona_player_info"),
httr::add_headers(.headers =
c(
"X-Fantasy-Filter" = r"({"players":{"filterSlotIds":{"value":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]},"filterRanksForScoringPeriodIds":{"value":[2]},"sortPercOwned":{"sortAsc":false,"sortPriority":1},"sortDraftRanks":{"sortPriority":100,"sortAsc":true,"value":"STANDARD"},"filterRanksForRankTypes":{"value":["PPR"]},"filterRanksForSlotIds":{"value":[0,2,4,6,17,16]},"filterStatsForTopScoringPeriodIds":{"value":2,"additionalValue":["002020","102020","002019","1120202","022020"]}}})"
)))%>%
httr::content(as = 'text', type = 'JSON', encoding = 'UTF-8') %>%
jsonlite::fromJSON(simplifyDataFrame = T) %>%
purrr::pluck("players") %>%
dplyr::bind_rows()
}
return(player_stats)
}
get_player_stats(season = 2020, league_id = 866268)
library(ESPNmythicalsports)
?get_player_stats
